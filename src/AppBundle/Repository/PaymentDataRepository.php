<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\PaymentData;

/**
 * PaymentDataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentDataRepository extends EntityRepository
{
	public function setObjectPropertyFromColumnPosition(PaymentData $paymentData, $columnPosition, $cellValue)
	{
		switch($columnPosition){
			case 'A':
				$paymentData->setCoveredRecipientType($cellValue);	
				break;
			case 'B':
				$paymentData->setTeachingHospitalId($cellValue);
				break;
			case 'C':
				$paymentData->setTeachingHospitalName($cellValue);
				break;
			case 'D':
				$paymentData->setPhsysicianProfileId($cellValue);
				break;
			case 'E':
				$paymentData->setPhysicianFirstName($cellValue);
				break;
			case 'F':
				$paymentData->setPhysicianMiddleName($cellValue);
				break;
			case 'G':
				$paymentData->setPhysicianLastName($cellValue);
				break;
			case 'H':
				$paymentData->setPhysicianNameSuffix($cellValue);
				break;
			case 'I':
				$paymentData->setRecipientPrimaryBusinessAddressLine1($cellValue);
				break;
			case 'J':
				$paymentData->setRecipientPrimaryBusinessAddressLine2($cellValue);
				break;
			case 'K':
				$paymentData->setRecipientCity($cellValue);
				break;
			case 'L':
				$paymentData->setRecipientState($cellValue);
				break;
			case 'M':
				$paymentData->setRecpientZipCode($cellValue);
				break;
			case 'N':
				$paymentData->setRecpientCountry($cellValue);
				break;
			case 'O':
				$paymentData->setRecipientProvince($cellValue);
				break;
			case 'P':
				$paymentData->setRecipientPostCode($cellValue);
				break;
			case 'Q':
				$paymentData->setPhysicianPrimaryType($cellValue);
				break;
			case 'R':
				$paymentData->setPhysicianSpeciality($cellValue);
				break;
			case 'S':
				$paymentData->setPhysicianLicenseState($cellValue);
				break;
			case 'T':
				$paymentData->setPhysicianLicenseState2($cellValue);
				break;
			case 'U':
				$paymentData->setPhysicicanLicenseState3($cellValue);
				break;
			case 'V':
				$paymentData->setPhysicianLicenseState4($cellValue);
				break;
			case 'W':
				$paymentData->setPhysicianLicenseState5($cellValue);
				break;
			case 'X':
				$paymentData->setApplicableManufacturerName($cellValue);
				break;
			case 'Y':
				$paymentData->setApplicableManufacturerId($cellValue);
				break;
			case 'Z':
				$paymentData->setApplicableManufacturerMakingPaymentName($cellValue);
				break;
			case 'AA':
				$paymentData->setApplicableManufacturerState($cellValue);
				break;
			case 'AB':
				$paymentData->setApplicableManufacturerCountry($cellValue);
				break;
			case 'AC':
				$paymentData->setTotalAmountOfPayment($cellValue);
				break;
			case 'AD':				
				$paymentData->setDateOfPayment($cellValue);
				break;
			case 'AE':
				$paymentData->setNumberOfPaymentIncludedInTotal($cellValue);
				break;
			case 'AF':
				$paymentData->setFormOfPaymentOrTransferValue($cellValue);
				break;
			case 'AG':
				$paymentData->setNatureOfPayment($cellValue);
				break;
			case 'AH':
				$paymentData->setCityOfTravel($cellValue);
				break;
			case 'AI':
				$paymentData->setStateOfTravel($cellValue);
				break;
			case 'AJ':
				$paymentData->setCountryOfTravel($cellValue);
				break;
			case 'AK':
				$bool = $this->_convertStringToBoolean($cellValue);
				$paymentData->setPhysicianOwnershipIndicator($bool);
				break;
			case 'AL':
				$paymentData->setThirdPartyPaymentRecipientIndicator($cellValue);
				break;
			case 'AM':
				$paymentData->setNameOfThirdPartyRecievingPayment($cellValue);
				break;
			case 'AN':
				$bool = $this->_convertStringToBoolean($cellValue);
				$paymentData->setCharityIndicator($bool);
				break;
			case 'AO':
				$paymentData->setThirdPartyEqualsCoveredRecipientIndcator($cellValue);
				break;
			case 'AP':
				$paymentData->setContextualInformation($cellValue);
				break;
			case 'AQ':
				$bool = $this->_convertStringToBoolean($cellValue);
				$paymentData->setDelayInPublicationIndicator($bool);
				break;
			case 'AR':
				$paymentData->setRecordId($cellValue);
				break;
			case 'AS':
				$bool = $this->_convertStringToBoolean($cellValue);
				$paymentData->setDisputeStatusForPublication($bool);
				break;
			case 'AT':
				$paymentData->setProductIndicator($cellValue);
				break;
			case 'AU':
				$paymentData->setNameOfAssociatedCoveredDrug($cellValue);
				break;
			case 'AV':
				$paymentData->setNameOfAssociatedCoveredDrug2($cellValue);
				break;
			case 'AW':
				$paymentData->setNameOfAssociatedCoveredDrug3($cellValue);
				break;
			case 'AX':
				$paymentData->setNameOfAssociatedCoveredDrug4($cellValue);
				break;
			case 'AY':
				$paymentData->setNameOfAssociatedCoveredDrug5($cellValue);
				break;
			case 'AZ':
				$paymentData->setNdcOfAssociatedDrug($cellValue);
				break;
			case 'BA':
				$paymentData->setNdcOfAssociatedDrug2($cellValue);
				break;
			case 'BB':
				$paymentData->setNdcOfAssociatedDrug3($cellValue);
				break;
			case 'BC':
				$paymentData->setNdcOfAssociatedDrug4($cellValue);
				break;
			case 'BD':
				$paymentData->setNdcOfAssociatedDrug5($cellValue);
				break;
			case 'BE':
				$paymentData->setNameOfCoveredDeviceOrSupply($cellValue);
			case 'BF':
				$paymentData->setNameOfCoveredDeviceOrSupply2($cellValue);
				break;
			case 'BG':
				$paymentData->setNameOfCoveredDeviceOrSupply3($cellValue);
				break;
			case 'BH':
				$paymentData->setNameOfCoveredDeviceOrSupply4($cellValue);
				break;
			case 'BI':
				$paymentData->setNameOfCoveredDeviceOrSupply5($cellValue);
				break;
			case 'BJ':
				$paymentData->setProgramYear($cellValue);
				break;
			case 'BK':
				$dateTime = strtotime($cellValue);
				$paymentData->setPaymentPublicationDate($dateTime);
				break;
			default:
				throw new \Exception('Invalid Column Position');
		}
		
		return $paymentData;
	}
	
	private function _convertStringToBoolean($cellValue)
	{
		if(strtolower($cellValue) == 'no'){
			return false;
		}
		return true;
	}
	
	public function searchAllParams($params)
	{
		
		$dql = 'SELECT a FROM AppBundle:PaymentData a
				WHERE a.id = :params
				OR a.coveredRecipientType LIKE :params
				OR a.teachingHospitalId LIKE :params
				OR a.teachingHospitalName LIKE :params
				OR a.phsysicianProfileId LIKE :params
				OR a.physicianFirstName LIKE :params
				OR a.physicianMiddleName LIKE :params
				OR a.physicianLastName LIKE :params
				OR a.physicianNameSuffix LIKE :params
				OR a.recipientPrimaryBusinessAddressLine1 LIKE :params
				OR a.recipientPrimaryBusinessAddressLine2 LIKE :params
				OR a.recipientCity LIKE :params
				OR a.recipientState LIKE :params
				OR a.recpientZipCode LIKE :params
				OR a.recpientCountry LIKE :params
				OR a.recipientProvince LIKE :params
				OR a.recipientPostCode LIKE :params
				OR a.physicianPrimaryType LIKE :params
				OR a.physicianSpeciality LIKE :params
				OR a.physicianLicenseState LIKE :params
				OR a.physicianLicenseState2 LIKE :params
				OR a.physicicanLicenseState3 LIKE :params
				OR a.physicianLicenseState4 LIKE :params
				OR a.physicianLicenseState5 LIKE :params
				OR a.applicableManufacturerName LIKE :params
				OR a.applicableManufacturerId LIKE :params
				OR a.applicableManufacturerMakingPaymentName LIKE :params
				OR a.applicableManufacturerState LIKE :params
				OR a.applicableManufacturerCountry LIKE :params
				OR a.totalAmountOfPayment LIKE :params
				OR a.dateOfPayment LIKE :params
				OR a.numberOfPaymentIncludedInTotal LIKE :params
				OR a.formOfPaymentOrTransferValue LIKE :params
				OR a.natureOfPayment LIKE :params
				OR a.cityOfTravel LIKE :params
				OR a.stateOfTravel LIKE :params
				OR a.countryOfTravel LIKE :params
				OR a.physicianOwnershipIndicator LIKE :params
				OR a.thirdPartyPaymentRecipientIndicator LIKE :params
				OR a.nameOfThirdPartyRecievingPayment LIKE :params
				OR a.charityIndicator LIKE :params
				OR a.thirdPartyEqualsCoveredRecipientIndcator LIKE :params
				OR a.contextualInformation LIKE :params
				OR a.delayInPublicationIndicator LIKE :params
				OR a.recordId LIKE :params
				OR a.disputeStatusForPublication LIKE :params
				OR a.productIndicator LIKE :params
				OR a.nameOfAssociatedCoveredDrug LIKE :params
				OR a.nameOfAssociatedCoveredDrug2 LIKE :params
				OR a.nameOfAssociatedCoveredDrug3 LIKE :params
				OR a.nameOfAssociatedCoveredDrug4 LIKE :params
				OR a.nameOfAssociatedCoveredDrug5 LIKE :params
				OR a.ndcOfAssociatedDrug LIKE :params
				OR a.ndcOfAssociatedDrug2 LIKE :params
				OR a.ndcOfAssociatedDrug3 LIKE :params
				OR a.ndcOfAssociatedDrug4 LIKE :params
				OR a.ndcOfAssociatedDrug5 LIKE :params
				OR a.nameOfCoveredDeviceOrSupply LIKE :params
				OR a.nameOfCoveredDeviceOrSupply2 LIKE :params
				OR a.nameOfCoveredDeviceOrSupply3 LIKE :params
				OR a.nameOfCoveredDeviceOrSupply4 LIKE :params
				OR a.nameOfCoveredDeviceOrSupply5 LIKE :params
				OR a.programYear LIKE :params
				OR a.paymentPublicationDate LIKE :params';
				$query = $this->_em->createQuery($dql);
				$query->setParameter('params', '%' . $params . '%');
				return $query->getResult();
	}
	
	public function populateSpreadsheetData($entityArray, $phpExcelObject)
	{
		//@TODO: CREATE CELL HEADERS WITH VALUES A1 -> BK1
		// Iteratate over entity array with the index starting at 2
		// so as not to overwrite the header.
		foreach($entityArray as $oneEntity){
			for($i = 0; $i < count($entityArray); $i++){
				$phpExcelObject->setCellValue();
			}
		}
	}
}
